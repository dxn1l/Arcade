package arcade.vista;

import arcade.persistencia.Partida;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import java.awt.*;
import java.util.List;
import java.util.stream.Collectors;

public class VentanaHistorial extends JFrame {

    private final JEditorPane areaTexto;
    private final JTree arbolFiltros;
    private final JLabel contadorLabel;
    private final JButton btnEliminarSeccion;


    public VentanaHistorial() {
        setTitle("Historial de Partidas");
        setSize(700, 450);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        DefaultMutableTreeNode raiz = new DefaultMutableTreeNode("Todos");

        DefaultMutableTreeNode nodoNReinas = new DefaultMutableTreeNode("NReinas");
        nodoNReinas.add(new DefaultMutableTreeNode("NReinas-4"));
        nodoNReinas.add(new DefaultMutableTreeNode("NReinas-6"));
        nodoNReinas.add(new DefaultMutableTreeNode("NReinas-8"));
        raiz.add(nodoNReinas);

        DefaultMutableTreeNode nodoCaballo = new DefaultMutableTreeNode("RecorridoCaballo");
        nodoCaballo.add(new DefaultMutableTreeNode("RecorridoCaballo-5"));
        nodoCaballo.add(new DefaultMutableTreeNode("RecorridoCaballo-6"));
        nodoCaballo.add(new DefaultMutableTreeNode("RecorridoCaballo-8"));
        raiz.add(nodoCaballo);

        DefaultMutableTreeNode nodoHanoi = new DefaultMutableTreeNode("TorresHanoi"));
        nodoHanoi.add(new DefaultMutableTreeNode("TorresHanoi-3"));
        nodoHanoi.add(new DefaultMutableTreeNode("TorresHanoi-4"));
        nodoHanoi.add(new DefaultMutableTreeNode("TorresHanoi-5"));
        raiz.add(nodoHanoi);

        arbolFiltros = new JTree(raiz);
        arbolFiltros.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        JScrollPane scrollArbol = new JScrollPane(arbolFiltros);
        scrollArbol.setPreferredSize(new Dimension(180, 0));
        add(scrollArbol, BorderLayout.WEST);

        JPanel panelDerecho = new JPanel(new BorderLayout());


        areaTexto = new JEditorPane();
        areaTexto.setContentType("text/html");
        areaTexto.setEditable(false);
        areaTexto.setFont(new Font("Monospaced", Font.PLAIN, 12));
        panelDerecho.add(new JScrollPane(areaTexto), BorderLayout.CENTER);


        JPanel panelInferior = new JPanel(new BorderLayout());

        JPanel botones = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton btnActualizar = new JButton("Actualizar");
        JButton btnEliminar = new JButton("Eliminar todo");
        btnEliminarSeccion = new JButton("Eliminar sección");


        botones.add(btnActualizar);
        botones.add(btnEliminar);
        botones.add(btnEliminarSeccion);

        contadorLabel = new JLabel("Mostrando 0 partidas");
        contadorLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        panelInferior.add(botones, BorderLayout.WEST);
        panelInferior.add(contadorLabel, BorderLayout.EAST);
        
        btnEliminar.addActionListener(e -> {
            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "¿Seguro que deseas eliminar todas las partidas?",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION
            );
            if (confirm == JOptionPane.YES_OPTION) {
                Partida.eliminarTodas();
                cargarHistorial("Todos");
            }
        });

        btnEliminarSeccion.addActionListener(e -> {
            Object selectedNode = arbolFiltros.getLastSelectedPathComponent();
            if (selectedNode != null) {
                String filtro = selectedNode.toString();
                if (filtro.equals("Todos")) {
                    JOptionPane.showMessageDialog(this,
                            "No se puede eliminar la sección 'Todos'.",
                            "Operación inválida",
                            JOptionPane.WARNING_MESSAGE);
                    return;
                }

                int confirm = JOptionPane.showConfirmDialog(
                        this,
                        "¿Seguro que deseas eliminar todas las partidas de '" + filtro + "'?",
                        "Confirmación",
                        JOptionPane.YES_NO_OPTION
                );

                if (confirm == JOptionPane.YES_OPTION) {
                    Partida.eliminarPorTipo(filtro);
                    cargarHistorial(filtro);
                }
            }
        });


        btnActualizar.addActionListener(e -> {
            Object selectedNode = arbolFiltros.getLastSelectedPathComponent();
            String filtro = selectedNode != null ? selectedNode.toString() : "Todos";
            cargarHistorial(filtro);
        });
        panelDerecho.add(panelInferior, BorderLayout.SOUTH);

        add(panelDerecho, BorderLayout.CENTER);

        arbolFiltros.addTreeSelectionListener(e -> {
            Object selectedNode = arbolFiltros.getLastSelectedPathComponent();
            if (selectedNode != null) {
                String seleccion = selectedNode.toString();
                cargarHistorial(seleccion);
                btnEliminarSeccion.setEnabled(!seleccion.equals("Todos"));
            }
        });

        cargarHistorial("Todos");
    }

    private void cargarHistorial(String tipoFiltro) {
        List<Partida> partidas = Partida.obtenerHistorial();

        if (!"Todos".equals(tipoFiltro)) {
            partidas = partidas.stream()
                    .filter(p -> p.getTipoJuego().startsWith(tipoFiltro))
                    .collect(Collectors.toList());
        }

        StringBuilder sb = new StringBuilder("<html><body style='font-family:monospace;'>");

        for (Partida p : partidas) {
            sb.append(p.toString()).append("<br>");
        }

        if (partidas.isEmpty()) {
            sb.append("No hay partidas guardadas.");
        }

        sb.append("</body></html>");
        areaTexto.setText(sb.toString());

        String textoContador = "Mostrando " + partidas.size() + " partida" + (partidas.size() != 1 ? "s" : "");
        contadorLabel.setText(textoContador);
    }
}
